RMAest_clean <- RMA_clean(RMAest_raw, outcome="continuous")
table(is.na(RMAest_clean$intervention_level))
#Add reference level to label
RMAest_clean$RFlabel_ref <- paste0(RMAest_clean$RFlabel, ", ref: ", RMAest_clean$intervention_level)
#Save cleaned data
saveRDS(RMAest_clean, paste0(here::here(),"/results/rf results/pooled_Zscore_PAR_results_FE.rds"))
rm(list=ls())
source(paste0(here::here(), "/0-config.R"))
source(paste0(here::here(), "/0-project-functions/0_clean_study_data_functions.R"))
source(paste0(here::here(), "/0-project-functions/0_risk_factor_functions.R"))
dfull <- readRDS(paste0(here::here(),"/results/rf results/full_RF_unadj_results.rds"))
d <- dfull %>% filter(type=="ATE")
#Drop reference levels
d <- d %>% filter(intervention_level != d$baseline_level)
RMAest <- d %>% group_by(intervention_variable, agecat, intervention_level, baseline_level, outcome_variable) %>%
do(pool.cont(.)) %>% as.data.frame()
RMAest$region <- "Pooled"
RMAest_region <- d %>% group_by(region, intervention_variable, agecat, intervention_level, baseline_level, outcome_variable) %>%
do(pool.cont(.)) %>% as.data.frame()
RMAest_raw <- rbind(RMAest, RMAest_region)
#Clean up dataframe for plotting
RMAest_clean <- RMA_clean(RMAest_raw)
#Add reference level to labe
RMAest_clean$RFlabel_ref <- paste0(RMAest_clean$RFlabel, ", ref: ", RMAest_clean$baseline_level)
saveRDS(RMAest_clean, paste0(here::here(),"/results/rf results/pooled_ATE_results_unadj.rds"))
rm(list=ls())
source(paste0(here::here(), "/0-config.R"))
source(paste0(here::here(), "/0-project-functions/0_clean_study_data_functions.R"))
source(paste0(here::here(), "/0-project-functions/0_risk_factor_functions.R"))
#Plot themes
source("5-visualizations/0-plot-themes.R")
theme_set(theme_ki())
#Load data
dfull <- readRDS(paste0(here::here(),"/results/rf results/full_RF_unadj_results.rds"))
head(dfull)
#Subset to primary outcomes
unique(dfull$outcome_variable)
d <- dfull %>% filter(outcome_variable=="stunted"|outcome_variable=="wasted"|
outcome_variable=="ever_stunted"|outcome_variable=="ever_wasted"|
outcome_variable=="pers_wast")
#Drop month and birthmonth until VIM results can be included
d <- d %>% filter(!(intervention_variable %in% c("month","brthmon")) )
#Subset agecat
unique(d$agecat)
d <- d %>% filter(agecat %in% c("Birth","6 months","24 months",
"0-24 months", "0-6 months", "6-24 months",
"0-24 months (no birth st.)","0-6 months (no birth st.)",
"0-24 months (no birth wast)",
"0-6 months (no birth wast)" ))
d$agecat[grepl("0-24 months",d$agecat)] <- "0-24 months"
d$agecat[grepl("0-6 months",d$agecat)] <- "0-6 months"
#Drop duplicated (unadjusted sex and month variables)
dim(d)
d <- distinct(d)
dim(d)
d <- droplevels(d)
prev <- d %>% filter(type=="E(Y)")
dpaf <- d %>% filter(type=="PAF")
d <- d %>% filter(type=="PAR")
pool.par <- function(d){
nstudies <- d %>% summarize(N=n())
fit<-NULL
try(fit<-rma(yi=untransformed_estimate, sei=untransformed_se, data=d, method="REML", measure="GEN"))
if(is.null(fit)){try(fit<-rma(yi=untransformed_estimate, sei=untransformed_se, data=d, method="ML", measure="GEN"))}
if(is.null(fit)){try(fit<-rma(yi=untransformed_estimate, sei=untransformed_se, data=d, method="DL", measure="GEN"))}
if(is.null(fit)){try(fit<-rma(yi=untransformed_estimate, sei=untransformed_se, data=d, method="HE", measure="GEN"))}
if(is.null(fit)){
est<-data.frame(PAR=NA, CI1=NA,  CI2=NA)
}else{
est<-data.frame(fit$b, fit$ci.lb, fit$ci.ub)
colnames(est)<-c("PAR","CI1","CI2")
}
est$Nstudies <- nstudies$N
rownames(est) <- NULL
return(est)
}
RMAest <- d %>% group_by(intervention_variable, agecat, intervention_level, baseline_level, outcome_variable,n_cell,n) %>%
do(pool.par(.)) %>% as.data.frame()
RMAest$region <- "Pooled"
RMAest_region <- d %>% group_by(region, intervention_variable, agecat, intervention_level, baseline_level, outcome_variable,n_cell,n) %>%
do(pool.par(.)) %>% as.data.frame()
RMAest_raw <- rbind(RMAest, RMAest_region)
#Calculate pooled prevalences
pool.prev <- function(d){
nstudies <- d %>% summarize(N=n())
fit<-NULL
try(fit<-rma(yi=untransformed_estimate, sei=untransformed_se, data=d, method="REML", measure="GEN"))
if(is.null(fit)){try(fit<-rma(yi=untransformed_estimate, sei=untransformed_se, data=d, method="ML", measure="GEN"))}
if(is.null(fit)){try(fit<-rma(yi=untransformed_estimate, sei=untransformed_se, data=d, method="DL", measure="GEN"))}
if(is.null(fit)){try(fit<-rma(yi=untransformed_estimate, sei=untransformed_se, data=d, method="HE", measure="GEN"))}
if(is.null(fit)){
est<-data.frame(prev=NA, CI1=NA,  CI2=NA)
}else{
est<-data.frame(fit$b, fit$ci.lb, fit$ci.ub)
colnames(est)<-c("prev","CI1","CI2")
}
est$Nstudies <- nstudies$N
rownames(est) <- NULL
return(est)
}
Prev_est <- prev %>% group_by(intervention_variable, agecat, intervention_level, baseline_level, outcome_variable) %>%
do(pool.prev(.)) %>% as.data.frame()
Prev_est$region <- "Pooled"
Prev_est_region <- prev %>% group_by(region, intervention_variable, agecat, intervention_level, baseline_level, outcome_variable) %>%
do(pool.prev(.)) %>% as.data.frame()
Prev_est_raw <- rbind(Prev_est, Prev_est_region)
Prev_est_raw <- Prev_est_raw %>% subset(., select = - c(CI1, CI2, Nstudies, baseline_level, intervention_level))
dim(RMAest_raw)
df <- left_join(RMAest_raw, Prev_est_raw, by = c("outcome_variable","intervention_variable", "agecat","region"))
dim(df)
#temp
df <- df %>% filter(!is.na(prev))
#Calculate PAF
df2 <- df %>% group_by(intervention_variable, agecat, outcome_variable, region) %>%
mutate(PAF=PAR/prev*100, PAF.CI1=CI1/prev*100, PAF.CI2=CI2/prev*100)
summary(df2$PAR)
summary(df2$prev)
summary(df2$PAF)
summary(df2$PAF.CI1)
summary(df2$PAF.CI2)
RMAest <- df2
#Clean up dataframe for plotting
RMAest_clean <- RMA_clean(RMAest)
#Add reference level to label
RMAest_clean$RFlabel_ref <- paste0(RMAest_clean$RFlabel, ", ref: ", RMAest_clean$intervention_level)
# save pooled PAF's
saveRDS(RMAest_clean, paste0(here::here(),"/results/rf results/pooled_PAF_results_unadj.rds"))
rm(list=ls())
source(paste0(here::here(), "/0-config.R"))
source(paste0(here::here(), "/0-project-functions/0_clean_study_data_functions.R"))
source(paste0(here::here(), "/0-project-functions/0_risk_factor_functions.R"))
#Plot themes
source("5-visualizations/0-plot-themes.R")
theme_set(theme_ki())
#Load data
dfull <- readRDS(paste0(here::here(),"/results/rf results/full_RF_unadj_results.rds"))
head(dfull)
unique(dfull$type)
d <- dfull %>% filter(type=="RR")
#drop morbidity and mortality analysis
d <- d %>% filter(outcome_variable!="dead" & outcome_variable!="co_occurence" & outcome_variable!="pers_wasted624")
#Subset agecat
d <- droplevels(d)
RMAest <- d %>% group_by(intervention_variable, agecat, intervention_level, baseline_level, outcome_variable) %>%
do(poolRR(.)) %>% as.data.frame()
RMAest$region <- "Pooled"
RMAest_region <- d %>% group_by(region, intervention_variable, agecat, intervention_level, baseline_level, outcome_variable) %>%
do(poolRR(.)) %>% as.data.frame()
RMAest_raw <- rbind(RMAest, RMAest_region)
#Clean up dataframe for plotting
RMAest_clean <- RMA_clean(RMAest_raw)
#Add reference level to label
RMAest_clean$RFlabel_ref <- paste0(RMAest_clean$RFlabel, ", ref: ", RMAest_clean$intervention_level)
#Save cleaned data
saveRDS(RMAest_clean, paste0(here::here(),"/results/rf results/pooled_RR_results_unadj.rds"))
rm(list=ls())
source(paste0(here::here(), "/0-config.R"))
source(paste0(here::here(), "/0-project-functions/0_clean_study_data_functions.R"))
source(paste0(here::here(), "/0-project-functions/0_risk_factor_functions.R"))
#Plot themes
source("5-visualizations/0-plot-themes.R")
theme_set(theme_ki())
#Load data
dfull <- readRDS(paste0(here::here(),"/results/rf results/full_RF_unadj_results.rds"))
head(dfull)
unique(dfull$type)
d <- dfull %>% filter(type=="PAR")
#Subset to stunting prevalence
unique(d$outcome_variable)
d <- d %>% filter(outcome_variable=="y_rate_haz"|outcome_variable=="y_rate_len"|
outcome_variable=="y_rate_wtkg"|outcome_variable=="haz"|
outcome_variable=="whz")
d <- droplevels(d)
df <- d %>% filter(outcome_variable=="haz"| outcome_variable=="whz",
agecat=="24 months")
pool.Zpar <- function(d){
nstudies <- d %>% summarize(N=n())
fit<-NULL
try(fit<-rma(yi=untransformed_estimate, sei=untransformed_se, data=d, method="REML", measure="GEN"))
if(is.null(fit)){try(fit<-rma(yi=untransformed_estimate, sei=untransformed_se, data=d, method="ML", measure="GEN"))}
if(is.null(fit)){try(fit<-rma(yi=untransformed_estimate, sei=untransformed_se, data=d, method="DL", measure="GEN"))}
if(is.null(fit)){try(fit<-rma(yi=untransformed_estimate, sei=untransformed_se, data=d, method="HE", measure="GEN"))}
if(is.null(fit)){
est<-data.frame(PAR=NA, CI1=NA,  CI2=NA)
}else{
est<-data.frame(fit$b, fit$ci.lb, fit$ci.ub)
colnames(est)<-c("PAR","CI1","CI2")
}
est$Nstudies <- nstudies$N
rownames(est) <- NULL
return(est)
}
RMAest <- d %>% group_by(intervention_variable, agecat, intervention_level, baseline_level, outcome_variable,n_cell,n) %>%
do(pool.Zpar(.)) %>% as.data.frame()
RMAest$region <- "Pooled"
RMAest_region <- d %>% group_by(region, intervention_variable, agecat, intervention_level, baseline_level, outcome_variable,n_cell,n) %>%
do(pool.Zpar(.)) %>% as.data.frame()
RMAest_raw <- rbind(RMAest, RMAest_region)
RMAest_raw <- RMAest_raw %>% filter(!is.na(PAR))
#Clean up dataframe for plotting
RMAest_clean <- RMA_clean(RMAest_raw, outcome="continuous")
table(is.na(RMAest_clean$intervention_level))
#Add reference level to label
RMAest_clean$RFlabel_ref <- paste0(RMAest_clean$RFlabel, ", ref: ", RMAest_clean$intervention_level)
#Save cleaned data
saveRDS(RMAest_clean, paste0(here::here(),"/results/rf results/pooled_Zscore_PAR_results_unadj.rds"))
rm(list=ls())
source(paste0(here::here(), "/0-config.R"))
source(paste0(here::here(), "/0-project-functions/0_clean_study_data_functions.R"))
source(paste0(here::here(), "/0-project-functions/0_risk_factor_functions.R"))
dfull <- readRDS(paste0(here::here(),"/results/rf results/full_RF_unadj_results.rds"))
d <- dfull %>% filter(type=="ATE")
#Drop reference levels
d <- d %>% filter(intervention_level != d$baseline_level)
RMAest <- d %>% group_by(intervention_variable, agecat, intervention_level, baseline_level, outcome_variable) %>%
do(pool.cont(., method="FE")) %>% as.data.frame()
RMAest$region <- "Pooled"
RMAest_region <- d %>% group_by(region, intervention_variable, agecat, intervention_level, baseline_level, outcome_variable) %>%
do(pool.cont(., method="FE")) %>% as.data.frame()
RMAest_raw <- rbind(RMAest, RMAest_region)
#Clean up dataframe for plotting
RMAest_clean <- RMA_clean(RMAest_raw)
#Add reference level to labe
RMAest_clean$RFlabel_ref <- paste0(RMAest_clean$RFlabel, ", ref: ", RMAest_clean$baseline_level)
saveRDS(RMAest_clean, paste0(here::here(),"/results/rf results/pooled_ATE_results_unadj_FE.rds"))
rm(list=ls())
source(paste0(here::here(), "/0-config.R"))
source(paste0(here::here(), "/0-project-functions/0_clean_study_data_functions.R"))
source(paste0(here::here(), "/0-project-functions/0_risk_factor_functions.R"))
#Plot themes
source("5-visualizations/0-plot-themes.R")
theme_set(theme_ki())
#Load data
d <- readRDS(paste0(here::here(),"/results/rf results/full_RF_unadj_results.rds"))
d$agecat[grepl("0-24 months",d$agecat)] <- "0-24 months"
d$agecat[grepl("0-6 months",d$agecat)] <- "0-6 months"
#Drop duplicated (unadjusted sex and month variables)
dim(d)
d <- distinct(d)
dim(d)
d <- droplevels(d)
prev <- d %>% filter(type=="E(Y)")
dpaf <- d %>% filter(type=="PAF")
d <- d %>% filter(type=="PAR")
RMAest <- d %>% group_by(intervention_variable, agecat, intervention_level, baseline_level, outcome_variable,n_cell,n) %>%
do(pool.par(., method="FE")) %>% as.data.frame()
RMAest$region <- "Pooled"
RMAest_region <- d %>% group_by(region, intervention_variable, agecat, intervention_level, baseline_level, outcome_variable,n_cell,n) %>%
do(pool.par(., method="FE")) %>% as.data.frame()
RMAest_raw <- rbind(RMAest, RMAest_region)
#Calculate pooled prevalences
Prev_est <- prev %>% group_by(intervention_variable, agecat, intervention_level, baseline_level, outcome_variable) %>%
do(pool.prev(., method="FE")) %>% as.data.frame()
Prev_est$region <- "Pooled"
Prev_est_region <- prev %>% group_by(region, intervention_variable, agecat, intervention_level, baseline_level, outcome_variable) %>%
do(pool.prev(., method="FE")) %>% as.data.frame()
Prev_est_raw <- rbind(Prev_est, Prev_est_region)
Prev_est_raw <- Prev_est_raw %>% subset(., select = - c(CI1, CI2, Nstudies, baseline_level, intervention_level))
dim(RMAest_raw)
df <- left_join(RMAest_raw, Prev_est_raw, by = c("outcome_variable","intervention_variable", "agecat","region"))
dim(df)
#temp
df <- df %>% filter(!is.na(prev))
#Calculate PAF
df2 <- df %>% group_by(intervention_variable, agecat, outcome_variable, region) %>%
mutate(PAF=PAR/prev*100, PAF.CI1=CI1/prev*100, PAF.CI2=CI2/prev*100)
summary(df2$PAR)
summary(df2$prev)
summary(df2$PAF)
summary(df2$PAF.CI1)
summary(df2$PAF.CI2)
RMAest <- df2
#Clean up dataframe for plotting
RMAest_clean <- RMA_clean(RMAest)
#Add reference level to label
RMAest_clean$RFlabel_ref <- paste0(RMAest_clean$RFlabel, ", ref: ", RMAest_clean$intervention_level)
# save pooled PAF's
saveRDS(RMAest_clean, paste0(here::here(),"/results/rf results/pooled_PAF_results_unadj_FE.rds"))
rm(list=ls())
source(paste0(here::here(), "/0-config.R"))
source(paste0(here::here(), "/0-project-functions/0_clean_study_data_functions.R"))
source(paste0(here::here(), "/0-project-functions/0_risk_factor_functions.R"))
#Plot themes
source("5-visualizations/0-plot-themes.R")
theme_set(theme_ki())
#Load data
dfull <- readRDS(paste0(here::here(),"/results/rf results/full_RF_unadj_results.rds"))
head(dfull)
unique(dfull$type)
d <- dfull %>% filter(type=="RR")
#drop morbidity and mortality analysis
d <- d %>% filter(outcome_variable!="dead" & outcome_variable!="co_occurence" & outcome_variable!="pers_wasted624")
#Subset agecat
d <- droplevels(d)
RMAest <- d %>% group_by(intervention_variable, agecat, intervention_level, baseline_level, outcome_variable) %>%
do(poolRR(., method="FE")) %>% as.data.frame()
RMAest$region <- "Pooled"
RMAest_region <- d %>% group_by(region, intervention_variable, agecat, intervention_level, baseline_level, outcome_variable) %>%
do(poolRR(., method="FE")) %>% as.data.frame()
RMAest_raw <- rbind(RMAest, RMAest_region)
#Clean up dataframe for plotting
RMAest_clean <- RMA_clean(RMAest_raw)
#Add reference level to label
RMAest_clean$RFlabel_ref <- paste0(RMAest_clean$RFlabel, ", ref: ", RMAest_clean$intervention_level)
#Save cleaned data
saveRDS(RMAest_clean, paste0(here::here(),"/results/rf results/pooled_RR_results_unadj_FE.rds"))
rm(list=ls())
source(paste0(here::here(), "/0-config.R"))
source(paste0(here::here(), "/0-project-functions/0_clean_study_data_functions.R"))
source(paste0(here::here(), "/0-project-functions/0_risk_factor_functions.R"))
#Plot themes
source("5-visualizations/0-plot-themes.R")
theme_set(theme_ki())
#Load data
dfull <- readRDS(paste0(here::here(),"/results/rf results/full_RF_unadj_results.rds"))
head(dfull)
unique(dfull$type)
d <- dfull %>% filter(type=="PAR")
#Subset to stunting prevalence
unique(d$outcome_variable)
d <- d %>% filter(outcome_variable=="y_rate_haz"|outcome_variable=="y_rate_len"|
outcome_variable=="y_rate_wtkg"|outcome_variable=="haz"|
outcome_variable=="whz")
d <- droplevels(d)
pool.Zpar <- function(d){
nstudies <- d %>% summarize(N=n())
fit<-NULL
try(fit<-rma(yi=untransformed_estimate, sei=untransformed_se, data=d, method="REML", measure="GEN"))
if(is.null(fit)){try(fit<-rma(yi=untransformed_estimate, sei=untransformed_se, data=d, method="ML", measure="GEN"))}
if(is.null(fit)){try(fit<-rma(yi=untransformed_estimate, sei=untransformed_se, data=d, method="DL", measure="GEN"))}
if(is.null(fit)){try(fit<-rma(yi=untransformed_estimate, sei=untransformed_se, data=d, method="HE", measure="GEN"))}
if(is.null(fit)){
est<-data.frame(PAR=NA, CI1=NA,  CI2=NA)
}else{
est<-data.frame(fit$b, fit$ci.lb, fit$ci.ub)
colnames(est)<-c("PAR","CI1","CI2")
}
est$Nstudies <- nstudies$N
rownames(est) <- NULL
return(est)
}
RMAest <- d %>% group_by(intervention_variable, agecat, intervention_level, baseline_level, outcome_variable,n_cell,n) %>%
do(pool.Zpar(., method="FE")) %>% as.data.frame()
RMAest$region <- "Pooled"
RMAest_region <- d %>% group_by(region, intervention_variable, agecat, intervention_level, baseline_level, outcome_variable,n_cell,n) %>%
do(pool.Zpar(., method="FE")) %>% as.data.frame()
RMAest_raw <- rbind(RMAest, RMAest_region)
RMAest_raw <- RMAest_raw %>% filter(!is.na(PAR))
#Clean up dataframe for plotting
RMAest_clean <- RMA_clean(RMAest_raw, outcome="continuous")
table(is.na(RMAest_clean$intervention_level))
#Add reference level to label
RMAest_clean$RFlabel_ref <- paste0(RMAest_clean$RFlabel, ", ref: ", RMAest_clean$intervention_level)
#Save cleaned data
saveRDS(RMAest_clean, paste0(here::here(),"/results/rf results/pooled_Zscore_PAR_results_unadj_FE.rds"))
rm(list=ls())
source(paste0(here::here(), "/0-config.R"))
source(paste0(here::here(), "/0-project-functions/0_risk_factor_functions.R"))
library(Hmisc)
simpleCap <- function(x){
s <- strsplit(x, " ")[[1]]
paste(toupper(substring(s, 1,1)), substring(s, 2),
sep="", collapse=" ")
}
d_adj <- readRDS(paste0(here::here(),"/results/rf results/full_RF_results.rds"))
d_unadj <- readRDS(paste0(here::here(),"/results/rf results/full_RF_unadj_results.rds"))
d_adj$adjusted = 1
d_unadj$adjusted = 0
d <- rbind(d_adj, d_unadj)
d$pooled <- 0
dRR <- readRDS(paste0(here::here(),"/results/rf results/pooled_RR_results.rds"))
dATE <- readRDS(paste0(here::here(),"/results/rf results/pooled_ATE_results.rds"))
dZ_PAR <- readRDS(paste0(here::here(),"/results/rf results/pooled_Zscore_PAR_results.rds"))
dPAF <- readRDS(paste0(here::here(),"/results/rf results/pooled_PAF_results.rds"))
head(d)
head(dRR)
dRR <- dRR %>% rename(estimate=RR, ci_lower=RR.CI1, ci_upper=RR.CI2) %>% mutate(type="RR", studyid="Pooled", country="", continuous=0)
dRR$adjusted = 1
dRR$pooled = 1
head(dATE)
dATE <- dATE %>% rename(estimate=ATE, ci_lower=CI1, ci_upper=CI2) %>% mutate(type="ATE", studyid="Pooled", country="", continuous=1)
dATE$adjusted = 1
dATE$pooled = 1
head(dZ_PAR)
dZ_PAR <- dZ_PAR %>% rename(estimate=PAR, ci_lower=CI1, ci_upper=CI2) %>% mutate(type="PAR", studyid="Pooled", country="", continuous=1)
dZ_PAR$adjusted = 1
dZ_PAR$pooled = 1
head(dPAF)
dPAF <- dPAF %>% rename(estimate=PAF, ci_lower=PAF.CI1, ci_upper=PAF.CI2) %>% mutate(type="PAF", studyid="Pooled", country="", continuous=0)
dPAF$adjusted = 1
dPAF$pooled = 1
df <- bind_rows(dRR, dATE, dZ_PAR, dPAF, d)
unique(df$type)
df <- df %>% filter(type=="RR" | type=="ATE" | type=="PAR" | type=="PAF")
df <- df %>% select("agecat","studyid","country","strata_label","adjustment_set","intervention_variable", "outcome_variable","type","parameter","intervention_level","baseline_level","region","continuous","adjusted", "pooled", "estimate",   "ci_lower", "ci_upper")
#Clean up dataframe
df <- RMA_clean(df)
#remove grant identifiers from studyid
df$studyid <- gsub("^k.*?-" , "", df$studyid)
#Cohort specific ids
df$country[df$country=="TANZANIA, UNITED REPUBLIC OF"] <- "TANZANIA"
df$country <- capitalize(tolower(df$country))
df$country[df$country=="South africa"] <- "South Africa"
df$country[df$country=="Guinea-bissau"] <- "Guinea-Bissau"
df$country[df$country=="Burkina faso"] <- "Burkina Faso"
df$studyid <- paste0(df$studyid, ", ", df$country)
df$studyid <- gsub("Pooled,","Pooled",df$studyid)
df$pooled <- factor(df$pooled, levels=c("1","0"))
df <- df %>% arrange(pooled, studyid)
head(df)
df <- df %>% select("agecat", "studyid", "country", "adjustment_set",
"intervention_variable", "outcome_variable", "type",
"intervention_level", "baseline_level", "region", "continuous",
"adjusted", "pooled", "estimate", "ci_lower", "ci_upper", "RFlabel")
var_key = read.csv("https://docs.google.com/spreadsheets/d/e/2PACX-1vRXN1QYQd4OUSGe0eRAL6gCEJQmhA3HGddPxGTVhEy5Tdt8Tin-kGnh0naLXWcUe8Lop_B6r6cfnr6h/pub?gid=0&single=true&output=csv")
intervention_levels = levels(df$intervention_variable)
df <- df %>%
dplyr::mutate(intervention_variable = df %>% left_join(var_key, by = c("intervention_variable" = "variable")) %>%
replace_na(list(variable.type = "exposure")) %>%
filter(variable.type == "exposure") %>%
pull("description")) %>%
dplyr::mutate(outcome_variable = df %>% left_join(var_key, by = c("outcome_variable" = "variable")) %>%
replace_na(list(variable.type = "outcome")) %>%
filter(variable.type == "outcome") %>%
pull("description"))
df$intervention_variable = factor(df$intervention_variable)
df$outcome_variable = factor(df$outcome_variable)
# Set order for outcome
outcome_levels = c("Prevalence of stunting", "Prevalence of severe stunting",
"Cumulative incidence of stunting", "Cumulative incidence of severe stunting",
"Prevalence of wasting", "Prevalence of severe wasting",
"Cumulative incidence of wasting", "Cumulative incidence of severe wasting",
"Prevalence of persistent wasting", "Persistently wasted 624",
"Wasting recovery",
"Prevalence of the co-occurance of stunting and wasting",
"Cumulative incidence of the co-occurance of stunting and wasting",
"Deceased", "Unspecified")
df$outcome_variable = factor(df$outcome_variable, levels = unique(c(outcome_levels, !(levels(df$outcome_variable) %in% outcome_levels))))
# Set order for exposure
intervention_var_levels = c("# of children <5 in HH", "# of people in HH", "# of rooms in HH",
"Any wasting <6 mo.", "Birth length (cm)", "Birth month",
"Birth order", "Birth weight (kg)", "Breastfed hour after birth",
"Child delivered at home", "Clean cooking fuel usage", "Diarrhea <24 mo. (% days)",
"Diarrhea <6 mo. (% days)", "Enrolled wasted", "Excl/Pred breastfed <6mo.",
"Father's age", "Father's education", "Father's height",
"Gestational age at birth", "HH food security", "HH wealth",
"Improved floor", "Improved sanitation", "Mean WHZ in the prior 3 mo.",
"Month of measurement", "Mother's age", "Mother's BMI",
"Mother's education","Mother's height", "Mother's weight",
"Persistent wasting <6 mo.", "Safe water source", "Sex",
"Single parent", "Vaginal birth")
df$intervention_var_levels = factor(df$intervention_variable, levels = unique(c(intervention_var_levels, !(levels(df$intervention_variable) %in% intervention_var_levels))))
# Set order for parameter
df  = df %>% mutate(type = case_when(
type == "ATE" ~ "Average Treatment Effect",
type == "RR" ~ "Relative Risk",
type == "PAR" ~ "Population Attributable Risk",
type == "PAF" ~ "Population Attributable Fraction"))
df$type <- factor(df$type, levels = c("Average Treatment Effect", "Population Attributable Fraction",
"Population Attributable Risk", "Relative Risk"))
# Set order for age category
agecat_levels = c("0-24 months", "Birth", "6 months", "24 months", "0-6 months", "6-24 months", "12 months",
"15 months", "18 months", "21 months", "3 months", "9 months", "3-6 months", "6-9 months",
"9-12 months", "12-15 months", "15-18 months", "Unspecified")
df$agecat = factor(df$agecat, levels = unique(c(agecat_levels, !(levels(df$agecat) %in% agecat_levels))))
levels(df$region) = c("Pooled", "South Asia", "Africa", "Latin America", "N.America & Europe")
df = df %>% replace_na(list(outcome_variable = "Unspecified", agecat = "Unspecified"))
spline_variables =  list.files(path = "figures/risk factor/Splines/HAZ/")
spline_variables <- data_frame(spline_vars = (spline_variables %>% gsub("haz_stat_by_", "", ., perl = TRUE) %>% gsub(".png", "", ., perl = TRUE)))
spline_variables$spline_vars_raw = spline_variables$spline_vars
spline_variables <- spline_variables %>% mutate(spline_vars = (spline_variables %>% left_join(var_key, by = c("spline_vars" = "variable")) %>%
replace_na(list(variable.type = "exposure")) %>%
filter(variable.type == "exposure") %>%
pull("description")))
spline_variables
saveRDS(df, paste0(here::here(),"/7-cc-shiny-app/shiny_rf_results.rds"))
saveRDS(spline_variables, paste0(here::here(),"/7-cc-shiny-app/spline_variables.rds"))
shiny::runApp('7-cc-shiny-app')
runApp('7-cc-shiny-app')
library(tidyverse)
# Use a single value to replace all missing values
x <- sample(c(1:5, NA, NA, NA))
coalesce(x, 0L)
# Or match together a complete vector from missing pieces
y <- c(1, 2, NA, NA, 5)
z <- c(NA, NA, 3, 4, 5)
coalesce(y, z)
# Supply lists by splicing them into dots:
vecs <- list(
c(1, 2, NA, NA, 5),
c(NA, NA, 3, 4, 5)
)
coalesce(!!!vecs)
x
y <- c(1, 2, NA, NA, 5)
z <- c(NA, NA, 3, 4, 5)
coalesce(y, z)
vecs <- list(
c(1, 2, NA, NA, 5),
c(NA, NA, 3, 4, 5)
)
coalesce(!!!vecs)
x <- sample(c(1:5, NA, NA, NA))
coalesce(x, 0L)
x
coalesce
coalesce(x)
coalesce(x, x[1])
vecs
library(washb)
design_matrix()
design_matrix
