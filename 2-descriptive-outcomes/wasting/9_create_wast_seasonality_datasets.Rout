
R version 4.0.4 (2021-02-15) -- "Lost Library Book"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> 
> 
> #-----------------------------------------
> # Process data for wasting traj figures
> #-----------------------------------------
> rm(list=ls())
> source(paste0(here::here(), "/0-config.R"))
── Attaching packages ─────────────────────────────────────── tidyverse 1.3.0 ──
✔ ggplot2 3.3.2     ✔ purrr   0.3.4
✔ tibble  3.1.0     ✔ dplyr   1.0.5
✔ tidyr   1.1.1     ✔ stringr 1.4.0
✔ readr   1.3.1     ✔ forcats 0.5.0
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
here() starts at /home/andrew.mertens/ki-longitudinal-manuscripts

Attaching package: ‘gridExtra’

The following object is masked from ‘package:dplyr’:

    combine


Attaching package: ‘reshape2’

The following object is masked from ‘package:tidyr’:

    smiths

Loading required package: Matrix

Attaching package: ‘Matrix’

The following objects are masked from ‘package:tidyr’:

    expand, pack, unpack

Loading 'metafor' package (version 2.4-0). For an overview 
and introduction to the package please type: help(metafor).

Attaching package: ‘data.table’

The following objects are masked from ‘package:reshape2’:

    dcast, melt

The following objects are masked from ‘package:dplyr’:

    between, first, last

The following object is masked from ‘package:purrr’:

    transpose

Loading required package: viridisLite

Attaching package: ‘maps’

The following object is masked from ‘package:purrr’:

    map


Attaching package: ‘assertthat’

The following object is masked from ‘package:tibble’:

    has_name

Loading required package: nlme

Attaching package: ‘nlme’

The following object is masked from ‘package:dplyr’:

    collapse

This is mgcv 1.8-31. For overview type 'help("mgcv-package")'.

Attaching package: ‘lazyeval’

The following objects are masked from ‘package:purrr’:

    is_atomic, is_formula


Attaching package: ‘rlang’

The following objects are masked from ‘package:lazyeval’:

    as_name, call_modify, call_standardise, expr_label, expr_text,
    f_env, f_env<-, f_label, f_lhs, f_lhs<-, f_rhs, f_rhs<-, f_text,
    is_atomic, is_call, is_formula, is_lang, is_pairlist, missing_arg

The following object is masked from ‘package:assertthat’:

    has_name

The following object is masked from ‘package:data.table’:

    :=

The following objects are masked from ‘package:purrr’:

    %@%, as_function, flatten, flatten_chr, flatten_dbl, flatten_int,
    flatten_lgl, flatten_raw, invoke, list_along, modify, prepend,
    splice


Attaching package: ‘scales’

The following object is masked from ‘package:viridis’:

    viridis_pal

The following object is masked from ‘package:purrr’:

    discard

The following object is masked from ‘package:readr’:

    col_factor


Attaching package: ‘foreach’

The following objects are masked from ‘package:purrr’:

    accumulate, when

Loading required package: iterators
Loading required package: parallel
Loading required package: survival

Attaching package: ‘survey’

The following object is masked from ‘package:graphics’:

    dotchart

Loading required package: bit

Attaching package: ‘bit’

The following object is masked from ‘package:data.table’:

    setattr

The following object is masked from ‘package:base’:

    xor

Attaching package bit64
package:bit64 (c) 2011-2017 Jens Oehlschlaegel
creators: integer64 runif64 seq :
coercion: as.integer64 as.vector as.logical as.integer as.double as.character as.bitstring
logical operator: ! & | xor != == < <= >= >
arithmetic operator: + - * / %/% %% ^
math: sign abs sqrt log log2 log10
math: floor ceiling trunc round
querying: is.integer64 is.vector [is.atomic} [length] format print str
values: is.na is.nan is.finite is.infinite
aggregation: any all min max range sum prod
cumulation: diff cummin cummax cumsum cumprod
access: length<- [ [<- [[ [[<-
combine: c rep cbind rbind as.data.frame
WARNING don't use as subscripts
WARNING semantics differ from integer
for more help type ?bit64

Attaching package: ‘bit64’

The following objects are masked from ‘package:base’:

    :, %in%, is.double, match, order, rank


Attaching package: ‘zoo’

The following objects are masked from ‘package:base’:

    as.Date, as.Date.numeric

Warning messages:
1: package ‘tidyverse’ was built under R version 4.0.5 
2: package ‘rlang’ was built under R version 4.0.5 
> source(paste0(here::here(), "/0-project-functions/0_clean_study_data_functions.R"))
> require(cowplot)
Loading required package: cowplot

********************************************************
Note: As of version 1.0.0, cowplot does not change the
  default ggplot2 theme anymore. To recover the previous
  behavior, execute:
  theme_set(theme_cowplot())
********************************************************


Attaching package: ‘cowplot’

The following object is masked from ‘package:ggthemes’:

    theme_map

The following object is masked from ‘package:ggpubr’:

    get_legend

> library(RcppRoll)
> 
> rain <- readRDS(here("/data/cohort_rain_data.rds"))
> head(rain)
# A tibble: 6 x 10
# Groups:   studyid, country, long, lat [1]
  studyid country  long   lat month   rain ave_month abs_rain   ann cohort_index
  <chr>   <chr>   <dbl> <dbl> <dbl>  <dbl>     <dbl>    <dbl> <dbl>        <dbl>
1 CMC-V-… INDIA    78.9    15     1  6.68       54.8     48.1  658.        0.799
2 CMC-V-… INDIA    78.9    15     2  1.08       54.8     53.7  658.        0.799
3 CMC-V-… INDIA    78.9    15     3  0.986      54.8     53.8  658.        0.799
4 CMC-V-… INDIA    78.9    15     4  4.03       54.8     50.8  658.        0.799
5 CMC-V-… INDIA    78.9    15     5 20.3        54.8     34.5  658.        0.799
6 CMC-V-… INDIA    78.9    15     6 65.8        54.8     11.0  658.        0.799
> 
> d <- readRDS(seasonality_data_path)
> 
> #subset to monthly cohorts
> d <- d %>% filter(measurefreq=="monthly")
> 
> #drop outliers 
> d <- d %>% filter(!is.na(whz)) %>% filter(whz < 5 & whz > (-5))
> 
> #rain <- rain %>% mutate(rain=1) %>% filter(!is.na(avg_ppt))
> d <- d %>% mutate(child=1) %>% rename(lat=latitude, long=longitud)
> 
> head(rain)
# A tibble: 6 x 10
# Groups:   studyid, country, long, lat [1]
  studyid country  long   lat month   rain ave_month abs_rain   ann cohort_index
  <chr>   <chr>   <dbl> <dbl> <dbl>  <dbl>     <dbl>    <dbl> <dbl>        <dbl>
1 CMC-V-… INDIA    78.9    15     1  6.68       54.8     48.1  658.        0.799
2 CMC-V-… INDIA    78.9    15     2  1.08       54.8     53.7  658.        0.799
3 CMC-V-… INDIA    78.9    15     3  0.986      54.8     53.8  658.        0.799
4 CMC-V-… INDIA    78.9    15     4  4.03       54.8     50.8  658.        0.799
5 CMC-V-… INDIA    78.9    15     5 20.3        54.8     34.5  658.        0.799
6 CMC-V-… INDIA    78.9    15     6 65.8        54.8     11.0  658.        0.799
> head(d)
          studyid subjid id country     region agedays  sex measurefreq month
1: CMC-V-BCS-2002      1  1   INDIA South Asia      33 Male     monthly     1
2: CMC-V-BCS-2002      1  1   INDIA South Asia      67 Male     monthly     2
3: CMC-V-BCS-2002      1  1   INDIA South Asia      95 Male     monthly     3
4: CMC-V-BCS-2002      1  1   INDIA South Asia     130 Male     monthly     4
5: CMC-V-BCS-2002      1  1   INDIA South Asia     159 Male     monthly     5
6: CMC-V-BCS-2002      1  1   INDIA South Asia     190 Male     monthly     6
     whz   haz   waz lat  long brthweek brthmon brthyr birthday studyday jday
1:  0.55 -3.56 -2.74  15 78.93       50      12   2002      343      376   12
2: -2.91 -1.93 -3.62  15 78.93       50      12   2002      343      410   46
3: -2.45 -2.67 -3.91  15 78.93       50      12   2002      343      438   74
4: -1.44 -2.35 -2.74  15 78.93       50      12   2002      343      473  109
5: -1.27 -2.95 -3.02  15 78.93       50      12   2002      343      502  138
6: -2.18 -2.08 -2.90  15 78.93       50      12   2002      343      533  169
   year child
1: 2002     1
2: 2002     1
3: 2002     1
4: 2002     1
5: 2002     1
6: 2002     1
> 
> # rain %>% group_by(studyid) %>% summarise(first(lat), first(long)) %>% as.data.frame()
> # d %>% group_by(studyid) %>% summarise(first(lat), first(long)) %>% as.data.frame()
> 
> 
> 
> 
> #3-month Rolling sum of rainfall
> 
> #Set a second ordering of month so all 3-month rain sums can be calculated (i.e grouping "Nov", "Dec","Jan" and "Dec","Jan", "Feb")
> rain$month2 = factor(rain$month, levels=c("6", "7", "8", "9", "10", "11", "12","1", "2", "3", "4", "5"))
> 
> #summarize rain by month
> #rain <- rain %>% group_by(studyid, month, month2, long, lat) %>% summarise(rain=mean(avg_ppt))
>   
> rain_quartile <- rain %>% group_by(studyid, long, lat, cohort_index) %>%
+   mutate(month_number = as.numeric(month),
+          month_number2 = as.numeric(month2)) %>%
+   arrange(studyid, long, lat, month_number) %>%
+   mutate(roll_sum1 = roll_sum(rain, 3, align = "right", fill = 0, na.rm=T)) %>%
+   arrange(studyid, long, lat, month_number2) %>%
+   mutate(roll_sum2 = roll_sum(rain, 3, align = "right", fill = 0, na.rm=T),
+          max_rain_quarter = ifelse(roll_sum1>roll_sum2, roll_sum1, roll_sum2),
+          month_end_max_rain = month_number[max_rain_quarter==max(max_rain_quarter)]) %>%
+   subset(., select=c(studyid, long, lat, cohort_index, month_end_max_rain)) %>% unique(.)
> head(rain_quartile, 12)
# A tibble: 12 x 5
# Groups:   studyid, long, lat, cohort_index [12]
   studyid            long    lat cohort_index month_end_max_rain
   <chr>             <dbl>  <dbl>        <dbl>              <dbl>
 1 CMC-V-BCS-2002     78.9  15           0.799                 11
 2 CMIN Bangladesh93  90.1  24.1         0.792                  9
 3 CMIN Peru89       -77.0 -12.2         0.598                  5
 4 CMIN Peru95       -77.0 -12.2         1.05                   5
 5 CONTENT           -77.0 -12.0         1.23                   5
 6 EE                 68.4  25.6         1.01                  10
 7 GMS-Nepal          86.0  26.8         1.03                  10
 8 Guatemala BSC     -90.5  14.6         0.722                 11
 9 IRC                78.9  12.8         0.629                 12
10 Keneba            -16.0  13.3         1.17                  10
11 MAL-ED            -73.2  -3.75        0.236                  4
12 MAL-ED            -38.5  -3.8         0.778                  5
> 
> 
> 
> # head(d)
> # head(rain)
> # dim(d)
> # dim(rain)
> # df <- left_join(d, rain, by = c("studyid", "month", "year","lat","long"))
> # dim(df)
> # table(1*is.na(df$rain), is.na(df$child))
> # #Notes: check which children aren't merging
> # 
> # 
> # df$studyid <- gsub("^k.*?-" , "", df$studyid)
> # df$country <- str_to_title(df$country)
> # 
> # df <- df %>% mutate(cohort = paste0(studyid, ", ", country),
> #                   cohort=factor(cohort, levels=unique(d$cohort)))
> # df <- droplevels(df)
> # cohorts=levels(df$cohort)
> 
> 
> # #Check the non-merges in the rain dataset and update
> # df_missing <- d %>% filter(is.na(rain))
> # head(df_missing)
> # table(df_missing$studyid)
> # table(df_missing$year)
> # table(df_missing$year, df_missing$month)
> 
> # # rain$country <- toupper(rain$country)
> # # rain$country[rain$country=="TANZANIA "]<-"TANZANIA"
> # rain <- mark_region(rain)
> # rain$region <- factor(rain$region, levels = c("South Asia","Africa","Latin America"))
> # rain$country <- tolower(rain$country)
> # d$country <- tolower(d$country)
> # colnames(rain)[1] <- "studyid"
> # d$country[d$country=="tanzania, united republic of"] <- "tanzania"
> # 
> # #remove grant identifiers from studyid
> # d$studyid <- gsub("^k.*?-" , "", d$studyid)
> # rain$studyid <- gsub("^k.*?-" , "", rain$studyid)
> # 
> # 
> # #Transform rain dataset
> # rain <- rain %>% subset(., select = c("studyid", "country", "region", "cohort_index", "Jan", "Feb", "Mar", "Apr", "May",
> #                                       "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"))
> # 
> # rain$country <- str_to_title(rain$country)
> # d$country <- str_to_title(d$country)
> # 
> # # gather meanWHZ by month data into long format
> # rain_long <- rain %>%
> #   gather(month,rain, -studyid, -country, -cohort_index, -region) 
> # rain_long$month = gsub("_pre","",rain_long$month)
> # rain_long$month = factor(rain_long$month, levels=c("Jan", "Feb", "Mar", "Apr", "May","Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"))
> # head(rain_long)
> # 
> # rain_long$month_day = as.numeric(rain_long$month) * 30.4167
> 
> # #arrange cohorts by seasonality index and set factor levels
> # rain_long <- rain_long %>% arrange(region, -cohort_index) %>% 
> #   mutate(cohort = paste0(studyid, ", ", country),
> #          cohort=factor(cohort, levels=unique(cohort))) 
> # d <- d %>% mutate(cohort = paste0(studyid, ", ", country),
> #                   cohort=factor(cohort, levels=unique(rain_long$cohort)))
> # 
> # rain_long <- droplevels(rain_long)
> # d <- droplevels(d)
> # cohorts=levels(d$cohort)
> 
> 
> 
> # Quartile cohorts month by levels of rainfall
> 
> #3-month Rolling sum of rainfall
> 
> #Set a second ordering of month so all 3-month rain sums can be calculated (i.e grouping "Nov", "Dec","Jan" and "Dec","Jan", "Feb")
> # rain_long$month2 = factor(rain_long$month, levels=c("Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec","Jan", "Feb", "Mar", "Apr", "May"))
> # 
> # rain_quartile <- rain_long %>% group_by(studyid, country) %>%
> #   mutate(month_number = as.numeric(month),
> #          month_number2 = as.numeric(month2)) %>%
> #   arrange(studyid, country, month_number) %>%
> #   mutate(roll_sum1 = roll_sum(rain, 3, align = "right", fill = 0, na.rm=T)) %>%
> #   arrange(studyid, country, month_number2) %>%
> #   mutate(roll_sum2 = roll_sum(rain, 3, align = "right", fill = 0, na.rm=T),
> #          max_rain_quarter = ifelse(roll_sum1>roll_sum2, roll_sum1, roll_sum2),
> #          month_end_max_rain = month_number[max_rain_quarter==max(max_rain_quarter)]) %>%
> #   select(studyid, country, cohort_index, month_end_max_rain) %>% unique(.)
> # head(rain_quartile, 12)
> 
> 
> #df <- left_join(d, rain_quartile, by = c("studyid","country"))
> dim(d)
[1] 179352     22
> dim(rain_quartile)
[1] 20  5
> #d <- d %>% mutate(long=round(long, 1),   lat=round(lat, 1))
> df <- left_join(d, rain_quartile, by = c("studyid","lat","long"))
> dim(df)
[1] 179352     24
> 
> df <- df %>% mutate(
+               rain_quartile = case_when(
+                 month_end_max_rain == 1 & month %in% c(11, 12, 1) ~ "Max rain", 
+                 month_end_max_rain == 2 & month %in% c(12, 1, 2) ~ "Max rain", 
+                 month_end_max_rain == 3 & month %in% c(1, 2, 3) ~ "Max rain", 
+                 month_end_max_rain == 4 & month %in% c(2, 3, 4) ~ "Max rain", 
+                 month_end_max_rain == 5 & month %in% c(3, 4, 5) ~ "Max rain", 
+                 month_end_max_rain == 6 & month %in% c(4, 5, 6) ~ "Max rain", 
+                 month_end_max_rain == 7 & month %in% c(5, 6, 7) ~ "Max rain", 
+                 month_end_max_rain == 8 & month %in% c(6, 7, 8) ~ "Max rain", 
+                 month_end_max_rain == 9 & month %in% c(7, 8, 9) ~ "Max rain", 
+                 month_end_max_rain == 10 & month %in% c(8, 9, 10) ~ "Max rain", 
+                 month_end_max_rain == 11 & month %in% c(9, 10, 11) ~ "Max rain", 
+                 month_end_max_rain == 12 & month %in% c(10, 11, 12) ~ "Max rain", 
+                 
+                 month_end_max_rain == 10 & month %in% c(11, 12, 1) ~ "Post-max rain", 
+                 month_end_max_rain == 11 & month %in% c(12, 1, 2) ~ "Post-max rain", 
+                 month_end_max_rain == 12 & month %in% c(1, 2, 3) ~ "Post-max rain", 
+                 month_end_max_rain == 1 & month %in% c(2, 3, 4) ~ "Post-max rain", 
+                 month_end_max_rain == 2 & month %in% c(3, 4, 5) ~ "Post-max rain", 
+                 month_end_max_rain == 3 & month %in% c(4, 5, 6) ~ "Post-max rain", 
+                 month_end_max_rain == 4 & month %in% c(5, 6, 7) ~ "Post-max rain", 
+                 month_end_max_rain == 5 & month %in% c(6, 7, 8) ~ "Post-max rain", 
+                 month_end_max_rain == 6 & month %in% c(7, 8, 9) ~ "Post-max rain", 
+                 month_end_max_rain == 7 & month %in% c(8, 9, 10) ~ "Post-max rain", 
+                 month_end_max_rain == 8 & month %in% c(9, 10, 11) ~ "Post-max rain", 
+                 month_end_max_rain == 9 & month %in% c(10, 11, 12) ~ "Post-max rain", 
+                 
+                 month_end_max_rain == 4 & month %in% c(11, 12, 1) ~ "Pre-max rain", 
+                 month_end_max_rain == 5 & month %in% c(12, 1, 2) ~ "Pre-max rain", 
+                 month_end_max_rain == 6 & month %in% c(1, 2, 3) ~ "Pre-max rain", 
+                 month_end_max_rain == 7 & month %in% c(2, 3, 4) ~ "Pre-max rain", 
+                 month_end_max_rain == 8 & month %in% c(3, 4, 5) ~ "Pre-max rain", 
+                 month_end_max_rain == 9 & month %in% c(4, 5, 6) ~ "Pre-max rain", 
+                 month_end_max_rain == 10 & month %in% c(5, 6, 7) ~ "Pre-max rain", 
+                 month_end_max_rain == 11 & month %in% c(6, 7, 8) ~ "Pre-max rain", 
+                 month_end_max_rain == 12 & month %in% c(7, 8, 9) ~ "Pre-max rain", 
+                 month_end_max_rain == 1 & month %in% c(8, 9, 10) ~ "Pre-max rain", 
+                 month_end_max_rain == 2 & month %in% c(9, 10, 11) ~ "Pre-max rain", 
+                 month_end_max_rain == 3 & month %in% c(10, 11, 12) ~ "Pre-max rain", 
+                 
+                 month_end_max_rain == 7 & month %in% c(11, 12, 1) ~ "Opposite max rain", 
+                 month_end_max_rain == 8 & month %in% c(12, 1, 2) ~ "Opposite max rain", 
+                 month_end_max_rain == 9 & month %in% c(1, 2, 3) ~ "Opposite max rain", 
+                 month_end_max_rain == 10 & month %in% c(2, 3, 4) ~ "Opposite max rain", 
+                 month_end_max_rain == 11 & month %in% c(3, 4, 5) ~ "Opposite max rain", 
+                 month_end_max_rain == 12 & month %in% c(4, 5, 6) ~ "Opposite max rain", 
+                 month_end_max_rain == 1 & month %in% c(5, 6, 7) ~ "Opposite max rain", 
+                 month_end_max_rain == 2 & month %in% c(6, 7, 8) ~ "Opposite max rain", 
+                 month_end_max_rain == 3 & month %in% c(7, 8, 9) ~ "Opposite max rain", 
+                 month_end_max_rain == 4 & month %in% c(8, 9, 10) ~ "Opposite max rain", 
+                 month_end_max_rain == 5 & month %in% c(9, 10, 11) ~ "Opposite max rain", 
+                 month_end_max_rain == 6 & month %in% c(10, 11, 12) ~ "Opposite max rain", 
+                 TRUE ~ ""
+                 )
+             )
> 
> table(!is.na(df$month), df$rain_quartile)
      
       Max rain Opposite max rain Post-max rain Pre-max rain
  TRUE    46156             43708         44485        45003
> 
> 
> #Drop observations without a month variable
> df <- df %>% filter(rain_quartile!="")
> df <- droplevels(df)
> 
> #Set reference levels
> df$rain_quartile <- factor(df$rain_quartile, levels=c("Opposite max rain","Post-max rain", "Pre-max rain", "Max rain"))
> 
> #Set up dataset for longbow analysis
> df <- filter(df, agedays < 24 * 30.4167)
> 
> df <- subset(df, select = c(studyid, subjid, id, agedays, country, cohort_index, whz, rain_quartile))
> head(df)
          studyid subjid id agedays country cohort_index   whz
1: CMC-V-BCS-2002      1  1      33   INDIA    0.7991662  0.55
2: CMC-V-BCS-2002      1  1      67   INDIA    0.7991662 -2.91
3: CMC-V-BCS-2002      1  1      95   INDIA    0.7991662 -2.45
4: CMC-V-BCS-2002      1  1     130   INDIA    0.7991662 -1.44
5: CMC-V-BCS-2002      1  1     159   INDIA    0.7991662 -1.27
6: CMC-V-BCS-2002      1  1     190   INDIA    0.7991662 -2.18
       rain_quartile
1:     Post-max rain
2:     Post-max rain
3: Opposite max rain
4: Opposite max rain
5: Opposite max rain
6:      Pre-max rain
> 
> 
> #Load covariate dataset
> cov <- readRDS(paste0(ghapdata_dir,"FINAL_clean_covariates.rds"))
> cov$country <- as.character(cov$country)
> cov$country[cov$country=="TANZANIA, UNITED REPUBLIC OF"]<-"TANZANIA"
> cov <- mark_region(cov)
> cov$region <- factor(cov$region, levels = c("South Asia","Africa","Latin America"))
> cov$country <- tolower(cov$country)
> cov$studyid <- gsub("^k.*?-" , "", cov$studyid)
> cov$country <- str_to_title(cov$country)
> cov <- cov %>% subset(., select = -c(id))
> 
> #Set reference level to the lowest
> cov$trth2o <- relevel(cov$trth2o, ref="1")
> cov$cleanck <- relevel(cov$cleanck, ref="1")
> cov$impfloor <- relevel(cov$impfloor, ref="1")
> cov$earlybf <- relevel(cov$earlybf, ref="1")
> cov$impsan <- relevel(cov$impsan, ref="1")
> cov$safeh20 <- relevel(cov$safeh20, ref="1")
> cov$predfeed3 <- relevel(cov$predfeed3, ref="1")
> cov$exclfeed3 <- relevel(cov$exclfeed3, ref="1")
> cov$predfeed6 <- relevel(cov$predfeed6, ref="1")
> cov$exclfeed6 <- relevel(cov$exclfeed6, ref="1")
> cov$predfeed36 <- relevel(cov$predfeed36, ref="1")
> cov$exclfeed36 <- relevel(cov$exclfeed36, ref="1")
> cov$predexfd6 <- relevel(cov$predexfd6, ref="1")
> # cov$perdiar6 <- relevel(cov$perdiar6, ref="0%")
> # cov$perdiar24 <- relevel(cov$perdiar24, ref="0%")
> 
> #Merge WLZ, season, and covariates
> dim(df)
[1] 179352      8
> dim(cov)
[1] 99630    68
> d <- left_join(df, cov, by = c("studyid", "subjid", "country"))
> dim(d)
[1] 179352     73
> 
> #Set adjustment variables
> W <- NULL
> 
> 
> #save analysis dataset
> save(d, file = paste0(ghapdata_dir, "seasonality_rf.Rdata"))
> 
> table(d$studyid)

   CMC-V-BCS-2002 CMIN Bangladesh93       CMIN Peru89       CMIN Peru95 
             8697              5372              2741              3978 
          CONTENT                EE         GMS-Nepal     Guatemala BSC 
             8339              8427             13340              2545 
              IRC            Keneba            MAL-ED            ResPak 
             9729             40115             39796              3164 
   TanzaniaChild2               TDC 
            29518              3591 
> table(d$country)

  BANGLADESH       BRAZIL       GAMBIA    GUATEMALA        INDIA        NEPAL 
       10964         4837        40115         2545        27713        19035 
    PAKISTAN         PERU SOUTH AFRICA     TANZANIA 
       11591        21185         6151        35216 
> table(d$rain_quartile)

Opposite max rain     Post-max rain      Pre-max rain          Max rain 
            43708             44485             45003             46156 
> table(is.na(d$id))

 FALSE 
179352 
> table(is.na(d$whz))

 FALSE 
179352 
> 
> #Specify analysis
> specify_rf_analysis <- function(A, Y, file,  W=NULL, V= c("studyid","country"), id="id", adj_sets=adjustment_sets){
+   
+   analyses <- expand.grid(A=A,Y=Y, stringsAsFactors = FALSE, KEEP.OUT.ATTRS = FALSE)
+   analyses$id <- id
+   analyses$strata <- list(V)
+   if(is.null(W)){analyses$W <- adj_sets[analyses$A]}else{
+     analyses$W <- list(W)
+   }
+   names(analyses$W) <- NULL
+   analyses$file <- file
+   
+   return(analyses)
+ }
> 
> 
> analyses <- specify_rf_analysis(A="rain_quartile", Y="whz", file="seasonality_rf.Rdata", adj_sets=NULL)
> 
> 
> #Save analysis specification
> save(analyses, file=paste0(here(),"/4-longbow-tmle-analysis/analysis specification/seasonality_analyses.rdata"))
> 
> 
> 
> #get N's for figure caption
> cohort_Ns <- d %>% group_by(studyid, country) %>% summarize(N=n(), nchild=length(unique(subjid)))
`summarise()` has grouped output by 'studyid'. You can override using the `.groups` argument.
> 
> 
> #NOTE: Need to updated cohort index cutoffs
> 
> #all
> d %>% group_by(studyid, country) %>% summarize(N=n(), nchild=length(unique(subjid))) %>% ungroup %>% summarize(min(N), max(N))
`summarise()` has grouped output by 'studyid'. You can override using the `.groups` argument.
# A tibble: 1 x 2
  `min(N)` `max(N)`
     <int>    <int>
1     2545    40115
> #high
> d %>% filter(cohort_index>=0.8) %>% group_by(studyid, country) %>% summarize(N=n(), nchild=length(unique(subjid))) %>% ungroup %>% summarize(min(N), max(N))
`summarise()` has grouped output by 'studyid'. You can override using the `.groups` argument.
# A tibble: 1 x 2
  `min(N)` `max(N)`
     <int>    <int>
1     3164    40115
> #med
> d %>% filter(cohort_index<0.8 & cohort_index>=0.5) %>% group_by(studyid, country) %>% summarize(N=n(), nchild=length(unique(subjid))) %>% ungroup %>% summarize(min(N), max(N))
`summarise()` has grouped output by 'studyid'. You can override using the `.groups` argument.
# A tibble: 1 x 2
  `min(N)` `max(N)`
     <int>    <int>
1     2545    29518
> #low
> d %>% filter(cohort_index<0.5) %>% group_by(studyid, country) %>% summarize(N=n(), nchild=length(unique(subjid))) %>% ungroup %>% summarize(min(N), max(N))
`summarise()` has grouped output by 'studyid'. You can override using the `.groups` argument.
# A tibble: 1 x 2
  `min(N)` `max(N)`
     <int>    <int>
1     6127     6127
> 
> 
> #Save cohort Ns
> saveRDS(cohort_Ns, file=paste0(here(),"/results/seasonTMLE_Ns.rds")) 
> 
> 
> 
> 
> 
> 
> proc.time()
   user  system elapsed 
 18.907   0.630  19.513 
