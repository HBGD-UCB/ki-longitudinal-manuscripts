
R version 4.0.4 (2021-02-15) -- "Lost Library Book"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> ##########################################
> # ki longitudinal manuscripts
> # co-occurrence analysis
> 
> # create indicators for newly stunted, 
> # recovered, relapsed, and never stunted
> ##########################################
> 
> #-----------------------------------------
> # Process data for stunting flow chart
> #-----------------------------------------
> rm(list=ls())
> source(paste0(here::here(), "/0-config.R"))
── Attaching packages ─────────────────────────────────────── tidyverse 1.3.0 ──
✔ ggplot2 3.3.2     ✔ purrr   0.3.4
✔ tibble  3.1.0     ✔ dplyr   1.0.5
✔ tidyr   1.1.1     ✔ stringr 1.4.0
✔ readr   1.3.1     ✔ forcats 0.5.0
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
here() starts at /home/andrew.mertens/ki-longitudinal-manuscripts

Attaching package: ‘gridExtra’

The following object is masked from ‘package:dplyr’:

    combine


Attaching package: ‘reshape2’

The following object is masked from ‘package:tidyr’:

    smiths

Loading required package: Matrix

Attaching package: ‘Matrix’

The following objects are masked from ‘package:tidyr’:

    expand, pack, unpack

Loading 'metafor' package (version 2.4-0). For an overview 
and introduction to the package please type: help(metafor).

Attaching package: ‘data.table’

The following objects are masked from ‘package:reshape2’:

    dcast, melt

The following objects are masked from ‘package:dplyr’:

    between, first, last

The following object is masked from ‘package:purrr’:

    transpose

Loading required package: viridisLite

Attaching package: ‘maps’

The following object is masked from ‘package:purrr’:

    map


Attaching package: ‘assertthat’

The following object is masked from ‘package:tibble’:

    has_name

Loading required package: nlme

Attaching package: ‘nlme’

The following object is masked from ‘package:dplyr’:

    collapse

This is mgcv 1.8-31. For overview type 'help("mgcv-package")'.

Attaching package: ‘lazyeval’

The following objects are masked from ‘package:purrr’:

    is_atomic, is_formula


Attaching package: ‘rlang’

The following objects are masked from ‘package:lazyeval’:

    as_name, call_modify, call_standardise, expr_label, expr_text,
    f_env, f_env<-, f_label, f_lhs, f_lhs<-, f_rhs, f_rhs<-, f_text,
    is_atomic, is_call, is_formula, is_lang, is_pairlist, missing_arg

The following object is masked from ‘package:assertthat’:

    has_name

The following object is masked from ‘package:data.table’:

    :=

The following objects are masked from ‘package:purrr’:

    %@%, as_function, flatten, flatten_chr, flatten_dbl, flatten_int,
    flatten_lgl, flatten_raw, invoke, list_along, modify, prepend,
    splice


Attaching package: ‘scales’

The following object is masked from ‘package:viridis’:

    viridis_pal

The following object is masked from ‘package:purrr’:

    discard

The following object is masked from ‘package:readr’:

    col_factor


Attaching package: ‘foreach’

The following objects are masked from ‘package:purrr’:

    accumulate, when

Loading required package: iterators
Loading required package: parallel
Loading required package: survival

Attaching package: ‘survey’

The following object is masked from ‘package:graphics’:

    dotchart

Loading required package: bit

Attaching package: ‘bit’

The following object is masked from ‘package:data.table’:

    setattr

The following object is masked from ‘package:base’:

    xor

Attaching package bit64
package:bit64 (c) 2011-2017 Jens Oehlschlaegel
creators: integer64 runif64 seq :
coercion: as.integer64 as.vector as.logical as.integer as.double as.character as.bitstring
logical operator: ! & | xor != == < <= >= >
arithmetic operator: + - * / %/% %% ^
math: sign abs sqrt log log2 log10
math: floor ceiling trunc round
querying: is.integer64 is.vector [is.atomic} [length] format print str
values: is.na is.nan is.finite is.infinite
aggregation: any all min max range sum prod
cumulation: diff cummin cummax cumsum cumprod
access: length<- [ [<- [[ [[<-
combine: c rep cbind rbind as.data.frame
WARNING don't use as subscripts
WARNING semantics differ from integer
for more help type ?bit64

Attaching package: ‘bit64’

The following objects are masked from ‘package:base’:

    :, %in%, is.double, match, order, rank


Attaching package: ‘zoo’

The following objects are masked from ‘package:base’:

    as.Date, as.Date.numeric

> 
> d <- readRDS(paste0(ghapdata_dir,"/co_occurrence_data.rds"))
> 
> d = d %>% ungroup() %>% mutate(studyid = as.character(studyid))
> 
> # since this will include recovery, 
> # subsetting to monthly cohorts
> d <- d %>% filter(measurefreq=="monthly")
> 
> # drop variables we don't need
> d = d %>% select(studyid, subjid, country, measid, agedays, haz, whz, waz)
> 
> 
> 
> # create reverse measid
> d = d %>% 
+   group_by(studyid, country, subjid) %>%
+   mutate(revmeasid = rev(seq_along(agedays)))
> 
> 
> ##########################################
> # Define indicators of faltering at each time point
> ##########################################
> 
> #Mark monthly  agecat
> d <- calc.monthly.agecat(d)
> d <- d %>% filter(!is.na(agecat))
> 
> #Number of children ever wasted and stunted
> d %>% mutate(co=ifelse(haz< (-2) & whz < (-2),1,0),
+              sevco=ifelse(haz< (-3) & whz < (-3),1,0)) %>% 
+   group_by(studyid, country, subjid) %>%
+   summarize(everco=max(co), eversevco=max(sevco)) %>% ungroup() %>%
+   summarize(N=n(), sumco=sum(everco), sumsevco=sum(eversevco), propco=mean(everco), propsevco=mean(eversevco))
`summarise()` has grouped output by 'studyid', 'country'. You can override using the `.groups` argument.
# A tibble: 1 x 5
      N sumco sumsevco propco propsevco
  <int> <dbl>    <dbl>  <dbl>     <dbl>
1 10709  1478      233  0.138    0.0218
> 
> 
> 
> 
> 
> flow_m = d %>%
+   mutate(agem = round(agedays / 30.4167)) %>%
+   #Take mean of multiple obs within a month
+   group_by(studyid,country,subjid, agem) %>%
+   summarize(haz=mean(haz), whz=mean(whz), waz=mean(waz)) %>%
+   group_by(studyid,country,subjid) %>%
+   mutate(stunted=ifelse(haz< -2,1,0),
+          wasted=ifelse(whz< -2,1,0),
+          underwt=ifelse(waz< -2,1,0),
+          co=1*(wasted==1 & stunted==1),
+          su=1*(underwt==1 & stunted==1),
+          wu=1*(wasted==1 & underwt==1),
+          stunted=ifelse(co==1 | su==1 | wu==1, 0, stunted),
+          wasted=ifelse(co==1 | su==1 | wu==1, 0, wasted),
+          underwt=ifelse(co==1 | su==1 | wu==1, 0, underwt),
+          su=ifelse(co==1 , 0, su),
+          wu=ifelse(co==1 , 0, wu),
+          lagstunted=lag(stunted), lagstunted=ifelse(is.na(lagstunted),0,lagstunted),
+          lageverstunted = lag(cummax(stunted)), lageverstunted=ifelse(is.na(lageverstunted),0,lageverstunted),
+          lagwasted=lag(wasted), lagwasted=ifelse(is.na(lagwasted),0,lagwasted),
+          lageverwasted = lag(cummax(wasted)), lageverwasted=ifelse(is.na(lageverwasted),0,lageverwasted),
+          lagunderwt=lag(underwt), lagunderwt=ifelse(is.na(lagunderwt),0,lagunderwt),
+          lageverunderwt = lag(cummax(underwt)), lageverunderwt=ifelse(is.na(lageverunderwt),0,lageverunderwt),
+          lagsu=lag(su), lagsu=ifelse(is.na(lagsu),0,lagsu),
+          lageversu = lag(cummax(su)), lageversu=ifelse(is.na(lageversu),0,lageversu),
+          lagwu=lag(wu), lagwu=ifelse(is.na(lagwu),0,lagwu),
+          lageverwu= lag(cummax(wu)), lageverwu=ifelse(is.na(lageverwu),0,lageverwu),
+          lagco=lag(co), lagco=ifelse(is.na(lagco),0,lagco),
+          lageverco= lag(cummax(co)), lageverco=ifelse(is.na(lageverco),0,lageverco),
+          recovered=ifelse((lageverstunted==1 | lageverwasted==1 | lageverunderwt==1 | lageversu==1 | lageverwu==1 | lageverco==1) &
+                             (stunted==0 & wasted==0 & underwt==0 & co==0 & su==0 & wu==0), 1, 0),
+          healthy=ifelse((lageverstunted==0 & lageverwasted==0 & lageverunderwt==0 & lageversu==0 & lageverwu==0 & lageverco==0) &
+                             (stunted==0 & wasted==0 & underwt==0 & co==0 & su==0 & wu==0), 1, 0))
`summarise()` has grouped output by 'studyid', 'country', 'subjid'. You can override using the `.groups` argument.
> 
> 
> 
> 
> 
> 
> # drop measurements with ages over 24 months
> flow_m = flow_m %>% filter(agem < 25) 
> 
> 
> 
> # check that indicators do not contain missing values
> assert_that(names(table(is.na(flow_m$stunted)))=="FALSE")
[1] TRUE
> assert_that(names(table(is.na(flow_m$wasted)))=="FALSE")
[1] TRUE
> assert_that(names(table(is.na(flow_m$underwt)))=="FALSE")
[1] TRUE
> assert_that(names(table(is.na(flow_m$co)))=="FALSE")
[1] TRUE
> assert_that(names(table(is.na(flow_m$su)))=="FALSE")
[1] TRUE
> assert_that(names(table(is.na(flow_m$wu)))=="FALSE")
[1] TRUE
> 
> # check for multiple categories
> flow_m = flow_m %>% mutate(sum = stunted+wasted+underwt+wu+su+co+recovered+healthy)
> assert_that(names(table(flow_m$sum))=="1")
[1] TRUE
> 
> 
> #Summary stats
> table(flow_m$wu)

     0      1 
157679   5299 
> 
> #Percent of wasted kids only wasted
> mean(sum(flow_m$wasted)/sum(flow_m$wasted, flow_m$wu, flow_m$co))
[1] 0.2268321
> #Also underweight
> mean(sum(flow_m$wu)/sum(flow_m$wasted, flow_m$wu, flow_m$co))
[1] 0.3777445
> #Also stunted + underweight
> mean(sum(flow_m$co)/sum(flow_m$wasted, flow_m$wu, flow_m$co))
[1] 0.3954234
> 
> #num children and observations
> flow_m %>% ungroup() %>% summarize(N=n(), nchild=length(unique(paste0(studyid, subjid))))
# A tibble: 1 x 2
       N nchild
   <int>  <int>
1 162978  10709
> flow_m %>% group_by(agem) %>% summarize(N=n(), nchild=length(unique(paste0(studyid, subjid)))) %>% as.data.frame()
   agem    N nchild
1     0 4793   4793
2     1 8171   8171
3     2 8479   8479
4     3 8356   8356
5     4 8453   8453
6     5 7562   7562
7     6 8260   8260
8     7 7973   7973
9     8 7650   7650
10    9 7433   7433
11   10 7723   7723
12   11 6678   6678
13   12 7412   7412
14   13 6012   6012
15   14 5914   5914
16   15 6797   6797
17   16 5528   5528
18   17 5406   5406
19   18 6451   6451
20   19 5218   5218
21   20 4362   4362
22   21 5373   5373
23   22 4232   4232
24   23 3920   3920
25   24 4822   4822
> 
> # Check that no child was classified in more
> # than one category at any time point
> summary = flow_m %>%
+   group_by(agem) %>%
+   summarise(
+     nchild=length(unique(subjid)),
+     N=n(),
+     stunted = mean(stunted, na.rm = TRUE),
+     wasted = mean(wasted, na.rm = TRUE),
+     underwt = mean(underwt, na.rm = TRUE),
+     wu = mean(wu, na.rm = TRUE),
+     su = mean(su, na.rm = TRUE),
+     co = mean(co, na.rm = TRUE),
+     recovered = mean(recovered, na.rm = TRUE),
+     healthy = mean(healthy, na.rm = TRUE))
> 
> summary = summary %>%
+   mutate(sum = stunted + wasted + underwt +
+            wu + su + co + recovered + healthy)
> 
> summary 
# A tibble: 25 x 12
    agem nchild     N stunted wasted underwt     wu     su      co recovered
   <dbl>  <int> <int>   <dbl>  <dbl>   <dbl>  <dbl>  <dbl>   <dbl>     <dbl>
 1     0   2529  4793  0.0480 0.114   0.0165 0.0426 0.0371 0.0115     0     
 2     1   5319  8171  0.0660 0.0487  0.0219 0.0204 0.0639 0.00967    0.0718
 3     2   5515  8479  0.0863 0.0320  0.0274 0.0190 0.0660 0.00743    0.129 
 4     3   5490  8356  0.0877 0.0266  0.0291 0.0256 0.0633 0.00874    0.166 
 5     4   5538  8453  0.0911 0.0206  0.0225 0.0290 0.0609 0.0111     0.195 
 6     5   5228  7562  0.0915 0.0192  0.0279 0.0319 0.0688 0.0132     0.203 
 7     6   5403  8260  0.0960 0.0156  0.0272 0.0324 0.0722 0.0125     0.228 
 8     7   5142  7973  0.0995 0.0151  0.0280 0.0336 0.0749 0.0192     0.240 
 9     8   5078  7650  0.103  0.0153  0.0258 0.0382 0.0817 0.0243     0.241 
10     9   4936  7433  0.112  0.0152  0.0237 0.0412 0.0862 0.0309     0.241 
# … with 15 more rows, and 2 more variables: healthy <dbl>, sum <dbl>
> summary %>% summarize(min(nchild), max(nchild))
# A tibble: 1 x 2
  `min(nchild)` `max(nchild)`
          <int>         <int>
1          2374          5538
> summary %>% summarize(min(N), max(N))
# A tibble: 1 x 2
  `min(N)` `max(N)`
     <int>    <int>
1     3920     8479
> 
> 
> 
> # aggregate data within study, country, and agecat
> co_agg = flow_m %>%
+   ungroup() %>%
+   mutate(agem = as.factor(agem)) %>%
+   group_by(studyid, country, agem) %>%
+   summarise(
+     nchild=n(),
+     stunted = sum(stunted),
+     wasted = sum(wasted),
+     underwt = sum(underwt),
+     wu = sum(wu),
+     su = sum(su),
+     co = sum(co),
+     recovered = sum(recovered),
+     healthy = sum(healthy))  
`summarise()` has grouped output by 'studyid', 'country'. You can override using the `.groups` argument.
> 
> # estimate random effects, format results
> pooled_stunt = run_rma_agem(data = co_agg, 
+                             n_name = "nchild", 
+                             x_name = "stunted", 
+                             label = "Stunted",
+                             method = "REML")
Warning message:
`as.tibble()` was deprecated in tibble 2.0.0.
Please use `as_tibble()` instead.
The signature and semantics have changed, see `?as_tibble`.
This warning is displayed once every 8 hours.
Call `lifecycle::last_warnings()` to see where this warning was generated. 
> pooled_wast = run_rma_agem(data = co_agg, 
+                             n_name = "nchild", 
+                             x_name = "wasted", 
+                             label = "Wasted",
+                             method = "REML")
Error in rma(data = data, ni = data[[ni]], method = method, xi = data[[xi]],  : 
  Fisher scoring algorithm did not converge. See 'help(rma)' for possible remedies.
Error in rma(data = data, ni = data[[ni]], method = method, xi = data[[xi]],  : 
  Fisher scoring algorithm did not converge. See 'help(rma)' for possible remedies.
> pooled_underwt = run_rma_agem(data = co_agg, 
+                            n_name = "nchild", 
+                            x_name = "underwt", 
+                            label = "Underweight",
+                            method = "REML")
> pooled_wu = run_rma_agem(data = co_agg, 
+                            n_name = "nchild", 
+                            x_name = "wu", 
+                            label = "Wasted+Underweight",
+                            method = "REML")
> pooled_su = run_rma_agem(data = co_agg, 
+                            n_name = "nchild", 
+                            x_name = "su", 
+                            label = "Stunted+Underweight",
+                            method = "REML")
> pooled_co = run_rma_agem(data = co_agg, 
+                            n_name = "nchild", 
+                            x_name = "co", 
+                            label = "Wasted+Stunted",
+                            method = "REML")
> pooled_healthy = run_rma_agem(data = co_agg, 
+                            n_name = "nchild", 
+                            x_name = "healthy", 
+                            label = "Healthy",
+                            method = "REML")
> pooled_recovered = run_rma_agem(data = co_agg, 
+                            n_name = "nchild", 
+                            x_name = "recovered", 
+                            label = "Recovered",
+                            method = "REML")
> 
> 
> 
> 
> co_pooled = bind_rows(pooled_stunt, pooled_wast, pooled_underwt, pooled_wu, pooled_su, pooled_co, pooled_healthy, pooled_recovered)
> 
> 
> #----------------------------------------------
> # setting estimates to 0 at birth for
> # still, previously, relapse stunted
> #----------------------------------------------
> 
> # identify which cells have 0's 
> stunted_0 = as.character(summary$agem[summary$stunted==0])
> wasted_0 =as.character(summary$agem[summary$wasted==0])
> underwt_0 = as.character(summary$agem[summary$underwt==0])
> wu_0 = as.character(summary$agem[summary$wu==0])
> su_0 = as.character(summary$agem[summary$su==0])
> co_0 = as.character(summary$agem[summary$co==0])
> recovered_0 = as.character(summary$agem[summary$recovered==0])
> healthy_0 = as.character(summary$agem[summary$healthy==0])
> 
> 
> 
> saveRDS(flow_m, file=paste0(res_dir, "co_flow.RDS"))
> saveRDS(co_pooled, file=paste0(res_dir, "co_flow_pooled.RDS"))
> 
> 
> 
> proc.time()
   user  system elapsed 
 56.280   0.769  57.044 
