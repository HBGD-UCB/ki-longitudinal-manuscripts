
R version 4.0.3 (2020-10-10) -- "Bunny-Wunnies Freak Out"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> ##########################################
> # ki longitudinal manuscripts
> # stunting analysis
> 
> # create indicators for newly stunted, 
> # recovered, relapsed, and never stunted
> ##########################################
> 
> #-----------------------------------------
> # Process data for stunting flow chart
> #-----------------------------------------
> rm(list=ls())
> source(paste0(here::here(), "/0-config.R"))
── Attaching packages ─────────────────────────────────────── tidyverse 1.3.0 ──
✔ ggplot2 3.3.2     ✔ purrr   0.3.4
✔ tibble  3.0.3     ✔ dplyr   1.0.1
✔ tidyr   1.1.1     ✔ stringr 1.4.0
✔ readr   1.3.1     ✔ forcats 0.5.0
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
here() starts at /home/andrew.mertens/ki-longitudinal-manuscripts

Attaching package: ‘gridExtra’

The following object is masked from ‘package:dplyr’:

    combine


Attaching package: ‘reshape2’

The following object is masked from ‘package:tidyr’:

    smiths

Loading required package: Matrix

Attaching package: ‘Matrix’

The following objects are masked from ‘package:tidyr’:

    expand, pack, unpack

Loading 'metafor' package (version 2.4-0). For an overview 
and introduction to the package please type: help(metafor).

Attaching package: ‘data.table’

The following objects are masked from ‘package:reshape2’:

    dcast, melt

The following objects are masked from ‘package:dplyr’:

    between, first, last

The following object is masked from ‘package:purrr’:

    transpose

Loading required package: viridisLite

Attaching package: ‘maps’

The following object is masked from ‘package:purrr’:

    map


Attaching package: ‘assertthat’

The following object is masked from ‘package:tibble’:

    has_name

Loading required package: nlme

Attaching package: ‘nlme’

The following object is masked from ‘package:dplyr’:

    collapse

This is mgcv 1.8-31. For overview type 'help("mgcv-package")'.

Attaching package: ‘lazyeval’

The following objects are masked from ‘package:purrr’:

    is_atomic, is_formula


Attaching package: ‘rlang’

The following objects are masked from ‘package:lazyeval’:

    as_name, call_modify, call_standardise, expr_label, expr_text,
    f_env, f_env<-, f_label, f_lhs, f_lhs<-, f_rhs, f_rhs<-, f_text,
    is_atomic, is_call, is_formula, is_lang, is_pairlist, missing_arg

The following object is masked from ‘package:assertthat’:

    has_name

The following object is masked from ‘package:data.table’:

    :=

The following objects are masked from ‘package:purrr’:

    %@%, as_function, flatten, flatten_chr, flatten_dbl, flatten_int,
    flatten_lgl, flatten_raw, invoke, list_along, modify, prepend,
    splice


Attaching package: ‘scales’

The following object is masked from ‘package:viridis’:

    viridis_pal

The following object is masked from ‘package:purrr’:

    discard

The following object is masked from ‘package:readr’:

    col_factor


Attaching package: ‘foreach’

The following objects are masked from ‘package:purrr’:

    accumulate, when

Loading required package: iterators
Loading required package: parallel
Loading required package: survival

Attaching package: ‘survey’

The following object is masked from ‘package:graphics’:

    dotchart

Loading required package: bit

Attaching package: ‘bit’

The following object is masked from ‘package:data.table’:

    setattr

The following object is masked from ‘package:base’:

    xor

Attaching package bit64
package:bit64 (c) 2011-2017 Jens Oehlschlaegel
creators: integer64 runif64 seq :
coercion: as.integer64 as.vector as.logical as.integer as.double as.character as.bitstring
logical operator: ! & | xor != == < <= >= >
arithmetic operator: + - * / %/% %% ^
math: sign abs sqrt log log2 log10
math: floor ceiling trunc round
querying: is.integer64 is.vector [is.atomic} [length] format print str
values: is.na is.nan is.finite is.infinite
aggregation: any all min max range sum prod
cumulation: diff cummin cummax cumsum cumprod
access: length<- [ [<- [[ [[<-
combine: c rep cbind rbind as.data.frame
WARNING don't use as subscripts
WARNING semantics differ from integer
for more help type ?bit64

Attaching package: ‘bit64’

The following objects are masked from ‘package:base’:

    :, %in%, is.double, match, order, rank


Attaching package: ‘zoo’

The following objects are masked from ‘package:base’:

    as.Date, as.Date.numeric

> 
> d <- readRDS(paste0(ghapdata_dir, "stunting_data.rds"))
> 
> d = d %>% ungroup() %>% mutate(studyid = as.character(studyid))
> 
> # since this will include recovery, 
> # subsetting to monthly cohorts
> d <- d %>% filter(measurefreq=="monthly")
> 
> # drop variables we don't need
> d = d %>% select(studyid, subjid, region, country, measid, agedays, haz)
> 
> # # create reverse measid
> # d = d %>% 
> #   group_by(studyid, country, subjid) %>%
> #   mutate(revmeasid = rev(seq_along(agedays)))
> 
> ##########################################
> # Define indicators of stunting at each time point
> ##########################################
> # define age windows
> d <- d %>% 
+       mutate(agecat=ifelse(agedays<=7, "Birth",
+                       ifelse(agedays>7 & agedays<=3*30.4167,"0-3 months",
+                            ifelse(agedays>3*30.4167 & agedays<=6*30.4167,"3-6 months",
+                                   ifelse(agedays>6*30.4167 & agedays<=9*30.4167,"6-9 months",
+                                          ifelse(agedays>9*30.4167 & agedays<=12*30.4167,"9-12 months",
+                                                 ifelse(agedays>12*30.4167 & agedays<=15*30.4167,"12-15 months",
+                                                        ifelse(agedays>15*30.4167 & agedays<=18*30.4167,"15-18 months",
+                                                               ifelse(agedays>18*30.4167 & agedays<=21*30.4167,"18-21 months",
+                                                                      ifelse(agedays>21*30.4167& agedays<=24*30.4167,"21-24 months","")))))))))) %>%
+       mutate(agecat=factor(agecat,levels=c("Birth","0-3 months","3-6 months","6-9 months","9-12 months","12-15 months","15-18 months","18-21 months","21-24 months")))
>   
> # check age categories
> d %>% group_by(agecat) %>%
+   summarise(min = min(agedays)/30.4167,
+             max = max(agedays)/30.4167)
`summarise()` ungrouping output (override with `.groups` argument)
# A tibble: 10 x 3
   agecat           min    max
   <fct>          <dbl>  <dbl>
 1 Birth         0.0329  0.230
 2 0-3 months    0.263   2.99 
 3 3-6 months    3.02    5.98 
 4 6-9 months    6.02    8.98 
 5 9-12 months   9.01   12.0  
 6 12-15 months 12.0    15.0  
 7 15-18 months 15.0    18.0  
 8 18-21 months 18.0    21.0  
 9 21-24 months 21.0    24.0  
10 <NA>         24.0    69.3  
> 
> 
> #--------------------------------------------------
> # classify stunting status each month
> #--------------------------------------------------
> flow_m = d %>%
+   mutate(agem = agedays / 30.4167, agem = round(agem)) %>%
+   group_by(studyid,country,subjid, region, agem) %>%
+     summarize(haz=mean(haz)) %>%
+   group_by(studyid,country,subjid) %>%
+   # # create reverse measid
+   mutate(measid = seq_along(agem),
+          revmeasid = rev(seq_along(agem))) %>%
+ 
+   mutate(stunted=ifelse(haz< -2,1,0),
+          lagstunted=lag(stunted),
+          lageverstunted = lag(cummax(stunted))) %>%
+   
+   mutate(newly_stunted = ifelse(stunted==1 & 
+                                   lageverstunted == 0 , 1, 0),
+          
+          recover =       ifelse(stunted==0 &
+                                   lagstunted==1 &
+                                   lageverstunted==1, 1, 0),
+          
+          never_stunted =       ifelse(stunted==0 &
+                                         lagstunted==0 &
+                                         lageverstunted==0, 1, 0)) %>%
+   
+   # recoding indicators at first measurement since lag is NA
+   mutate(newly_stunted = ifelse(stunted==1 & measid==1, 1, newly_stunted),
+          
+          never_stunted = ifelse(stunted==0 & measid==1, 1, never_stunted),
+          
+          recover = ifelse(stunted==0 & measid==1, 0, recover)) %>%
+   
+   # code relapse 
+   mutate(everrecover = cummax(recover),
+          evernew = cummax(newly_stunted),
+          
+          relapse =       ifelse(stunted==1 &
+                                   lageverstunted==1 &
+                                   lagstunted==0 &
+                                   everrecover==1, 1, 0),
+          
+          still_stunted = ifelse(stunted==1 & 
+                                   evernew==1 &
+                                   lagstunted==1, 1, 0),
+          
+          not_stunted =   ifelse(stunted==0 & 
+                                   lagstunted==0 &
+                                   everrecover==1, 1, 0))  %>%
+   
+   # recode still stunted at first measurement  
+   mutate(still_stunted = ifelse(measid==1, 0, still_stunted))
`summarise()` regrouping output by 'studyid', 'country', 'subjid', 'region' (override with `.groups` argument)
> 
> 
> # drop measurements with ages over 24 months
> #flow_m = flow_m %>% filter(!is.na(agecat)) 
> flow_m = flow_m %>% filter(agem < 25) 
> 
> 
> #Number of children in primary plot
> flow_m %>% filter(agem < 16) %>% ungroup() %>%
+   summarize(Nchild=length(unique(paste0(studyid, subjid))))
# A tibble: 1 x 1
  Nchild
   <int>
1  10563
> d %>% filter(agedays<=16 * 30.4167) %>% ungroup() %>%
+   summarize(Nchild=length(unique(paste0(studyid, subjid))))
# A tibble: 1 x 1
  Nchild
   <int>
1  10571
> 
> 
> #--------------------------------------------------
> # check that indicators do not contain missing values
> #--------------------------------------------------
> assert_that(names(table(is.na(flow_m$newly_stunted)))=="FALSE")
[1] TRUE
> assert_that(names(table(is.na(flow_m$recover)))=="FALSE")
[1] TRUE
> assert_that(names(table(is.na(flow_m$relapse)))=="FALSE")
[1] TRUE
> assert_that(names(table(is.na(flow_m$still_stunted)))=="FALSE")
[1] TRUE
> assert_that(names(table(is.na(flow_m$not_stunted)))=="FALSE")
[1] TRUE
> assert_that(names(table(is.na(flow_m$never_stunted)))=="FALSE")
[1] TRUE
> 
> # check for multiple categories
> flow_m = flow_m %>% mutate(sum = newly_stunted + 
+                              still_stunted + recover + not_stunted + never_stunted + 
+                              relapse)
> assert_that(names(table(flow_m$sum))=="1")
[1] TRUE
>   
> 
> #--------------------------------------------------
> # Check that no child was classified in more
> # than one category at any time point 
> #--------------------------------------------------
> summary = flow_m %>%
+   group_by(agem) %>%
+   summarise(
+     nchild=length(unique(subjid)),
+     newly_stunted = mean(newly_stunted, na.rm = TRUE),
+     still_stunted = mean(still_stunted, na.rm = TRUE),
+     recover = mean(recover, na.rm = TRUE),
+     not_stunted = mean(not_stunted, na.rm = TRUE),
+     never_stunted = mean(never_stunted, na.rm = TRUE),
+     relapse = mean(relapse, na.rm = TRUE))
`summarise()` ungrouping output (override with `.groups` argument)
> 
> summary = summary %>%
+   mutate(sum = still_stunted + newly_stunted + recover + 
+            never_stunted + not_stunted + relapse)
> 
> summary
# A tibble: 25 x 9
    agem nchild newly_stunted still_stunted recover not_stunted never_stunted
   <dbl>  <int>         <dbl>         <dbl>   <dbl>       <dbl>         <dbl>
 1     0   2596        0.144         0       0           0              0.856
 2     1   5343        0.0934        0.0495  0.0274      0              0.830
 3     2   5524        0.0654        0.0899  0.0404      0.0189         0.780
 4     3   5498        0.0405        0.106   0.0481      0.0426         0.749
 5     4   5542        0.0349        0.110   0.0440      0.0671         0.725
 6     5   5231        0.0347        0.121   0.0425      0.0881         0.696
 7     6   5412        0.0321        0.127   0.0413      0.104          0.673
 8     7   5146        0.0291        0.142   0.0402      0.119          0.647
 9     8   5083        0.0268        0.153   0.0347      0.128          0.628
10     9   4939        0.0228        0.176   0.0322      0.137          0.602
# … with 15 more rows, and 2 more variables: relapse <dbl>, sum <dbl>
> 
> #--------------------------------------------------
> # aggregate data within study, country, and agecat
> #--------------------------------------------------
> stunt_agg = flow_m %>%
+   ungroup() %>%
+   mutate(agem = as.factor(agem)) %>%
+   group_by(studyid, country, agem) %>%
+   summarise(
+     nchild=length(unique(subjid)),
+     newly_stunted = sum(newly_stunted),
+     still_stunted = sum(still_stunted),
+     recover = sum(recover),
+     not_stunted = sum(not_stunted),
+     never_stunted = sum(never_stunted),
+     relapse = sum(relapse))  
`summarise()` regrouping output by 'studyid', 'country' (override with `.groups` argument)
> 
> #--------------------------------------------------
> # estimate random effects, format results
> #--------------------------------------------------
> pooled_newly = run_rma_agem(data = stunt_agg, 
+                        n_name = "nchild", 
+                        x_name = "newly_stunted", 
+                        label = "Newly stunted",
+                        method = "REML")
Warning message:
`as.tibble()` is deprecated as of tibble 2.0.0.
Please use `as_tibble()` instead.
The signature and semantics have changed, see `?as_tibble`.
This warning is displayed once every 8 hours.
Call `lifecycle::last_warnings()` to see where this warning was generated. 
> 
> pooled_still = run_rma_agem(data = stunt_agg, 
+                        n_name = "nchild", 
+                        x_name = "still_stunted", 
+                        label = "Still stunted",
+                        method = "REML")
> 
> pooled_not = run_rma_agem(data = stunt_agg, 
+                        n_name = "nchild", 
+                        x_name = "not_stunted", 
+                        label = "Not stunted",
+                        method = "REML")
> 
> pooled_rec = run_rma_agem(data = stunt_agg, 
+                       n_name = "nchild", 
+                       x_name = "recover",
+                       label = "Recovered",
+                       method = "REML")
> 
> pooled_relapse = run_rma_agem(data = stunt_agg, 
+                          n_name = "nchild", 
+                          x_name = "relapse",
+                          label = "Stunting relapse",
+                          method = "REML")
> 
> pooled_never = run_rma_agem(data = stunt_agg, 
+                        n_name = "nchild", 
+                        x_name = "never_stunted",
+                        label = "Never stunted",
+                        method = "REML")
> 
> stunt_pooled = bind_rows(pooled_newly, 
+                          pooled_still,
+                          pooled_rec,
+                          pooled_relapse,
+                          pooled_not,
+                          pooled_never
+ )
> 
> #--------------------------------------------------
> # estimate fixed effects, format results
> #--------------------------------------------------
> pooled_newly_fe = run_rma_agem(data = stunt_agg, 
+                                n_name = "nchild", 
+                                x_name = "newly_stunted", 
+                                label = "Newly stunted",
+                                method = "FE")
> 
> pooled_still_fe = run_rma_agem(data = stunt_agg, 
+                                n_name = "nchild", 
+                                x_name = "still_stunted", 
+                                label = "Still stunted",
+                                method = "FE")
> 
> pooled_not_fe = run_rma_agem(data = stunt_agg, 
+                              n_name = "nchild", 
+                              x_name = "not_stunted", 
+                              label = "Not stunted",
+                              method = "FE")
> 
> pooled_rec_fe = run_rma_agem(data = stunt_agg, 
+                              n_name = "nchild", 
+                              x_name = "recover",
+                              label = "Recovered",
+                              method = "FE")
> 
> pooled_relapse_fe = run_rma_agem(data = stunt_agg, 
+                                  n_name = "nchild", 
+                                  x_name = "relapse",
+                                  label = "Stunting relapse",
+                                  method = "FE")
> 
> pooled_never_fe = run_rma_agem(data = stunt_agg, 
+                                n_name = "nchild", 
+                                x_name = "never_stunted",
+                                label = "Never stunted",
+                                method = "FE")
> 
> stunt_pooled_fe = bind_rows(pooled_newly_fe, 
+                             pooled_still_fe,
+                             pooled_rec_fe,
+                             pooled_relapse_fe,
+                             pooled_not_fe,
+                             pooled_never_fe
+ )
> 
> 
> #----------------------------------------------
> # setting estimates to 0 at birth for
> # still, previously, relapse stunted
> #----------------------------------------------
> 
> # identify which cells have 0's 
> newly_0 = as.character(summary$agem[summary$newly_stunted==0])
> still_0 = as.character(summary$agem[summary$still_stunted==0])
> rec_0 = as.character(summary$agem[summary$recover==0])
> relapse_0 = as.character(summary$agem[summary$relapse==0])
> not_0 = as.character(summary$agem[summary$not_stunted==0])
> never_0 = as.character(summary$agem[summary$never_stunted==0])
> 
> # function to replace est, se, lb, ub, est.f if
> # no observations in summary
> replace_zero = function(data, age_list, label){
+   
+   if(length(age_list)>0){
+     
+     data$est[data$label==label & data$agecat %in% age_list] = 0
+     data$ptest.f[data$label==label & data$agecat %in% age_list] = "0"
+     data$se[data$label==label & data$agecat %in% age_list] = 0
+     data$lb[data$label==label & data$agecat %in% age_list] = 0
+     data$ub[data$label==label & data$agecat %in% age_list] = 0
+     
+   }
+   return(data)
+ }
> 
> stunt_pooled_corr = replace_zero(data = stunt_pooled,
+                                  age_list = newly_0,
+                                  label = "Newly stunted")
> 
> stunt_pooled_corr = replace_zero(data = stunt_pooled_corr,
+                                  age_list = still_0,
+                                  label = "Still stunted")
> 
> stunt_pooled_corr = replace_zero(data = stunt_pooled_corr,
+                                  age_list = not_0,
+                                  label = "Not stunted")
> 
> stunt_pooled_corr = replace_zero(data = stunt_pooled_corr,
+                                  age_list = rec_0,
+                                  label = "Recovered")
> 
> stunt_pooled_corr = replace_zero(data = stunt_pooled_corr,
+                                  age_list = relapse_0,
+                                  label = "Stunting relapse")
> 
> stunt_pooled_corr = replace_zero(data = stunt_pooled_corr,
+                                  age_list = never_0,
+                                  label = "Never stunted")
> 
> stunt_pooled_corr_fe = replace_zero(data = stunt_pooled_fe,
+                                     age_list = newly_0,
+                                     label = "Newly stunted")
> 
> stunt_pooled_corr_fe = replace_zero(data = stunt_pooled_corr_fe,
+                                     age_list = still_0,
+                                     label = "Still stunted")
> 
> stunt_pooled_corr_fe = replace_zero(data = stunt_pooled_corr_fe,
+                                     age_list = not_0,
+                                     label = "Not stunted")
> 
> stunt_pooled_corr_fe = replace_zero(data = stunt_pooled_corr_fe,
+                                     age_list = rec_0,
+                                     label = "Recovered")
> 
> stunt_pooled_corr_fe = replace_zero(data = stunt_pooled_corr_fe,
+                                     age_list = relapse_0,
+                                     label = "Stunting relapse")
> 
> stunt_pooled_corr_fe = replace_zero(data = stunt_pooled_corr_fe,
+                                     age_list = never_0,
+                                     label = "Never stunted")
> 
> 
> saveRDS(flow_m, file=paste0(res_bluevelvet_dir, "stuntflow.RDS"))
> saveRDS(stunt_pooled_corr, file=paste0(res_dir, "stuntflow_pooled.RDS"))
> saveRDS(stunt_pooled_corr_fe, file=paste0(res_dir, "stuntflow_pooled_fe.RDS"))
> 
> 
> 
> proc.time()
   user  system elapsed 
 38.292   1.492  39.761 
